//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DemoCoreWeb.Client
{
	
	
	public class WeatherForecast : object
	{
		
		public System.DateTime Date { get; set; }
		
		public string Summary { get; set; }
		
		public int TemperatureC { get; set; }
	}
}
namespace DemoCoreWeb.Controllers.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	
	
	public partial class WeatherForecast
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public WeatherForecast(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException(nameof(client), "Null HttpClient.");

			if (client.BaseAddress == null)
				throw new ArgumentNullException(nameof(client), "HttpClient has no BaseAddress");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// GET WeatherForecast
		/// </summary>
		public async Task<DemoCoreWeb.Client.WeatherForecast[]> GetAsync()
		{
			var requestUri = "WeatherForecast";
			using var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri);
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DemoCoreWeb.Client.WeatherForecast[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// GET WeatherForecast
		/// </summary>
		public DemoCoreWeb.Client.WeatherForecast[] Get()
		{
			var requestUri = "WeatherForecast";
			using var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri);
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DemoCoreWeb.Client.WeatherForecast[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// GET WeatherForecast/appsettings
		/// </summary>
		public async Task<string> GetSettingsAsync()
		{
			var requestUri = "WeatherForecast/appsettings";
			using var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri);
			var responseMessage = await client.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				if (responseMessage.StatusCode == System.Net.HttpStatusCode.NoContent) { return null; }
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using System.IO.StreamReader streamReader = new System.IO.StreamReader(stream);
				return streamReader.ReadToEnd();;
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// GET WeatherForecast/appsettings
		/// </summary>
		public string GetSettings()
		{
			var requestUri = "WeatherForecast/appsettings";
			using var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri);
			var responseMessage = client.SendAsync(httpRequestMessage).Result;
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				if (responseMessage.StatusCode == System.Net.HttpStatusCode.NoContent) { return null; }
				var stream = responseMessage.Content.ReadAsStreamAsync().Result;
				using System.IO.StreamReader streamReader = new System.IO.StreamReader(stream);
				return streamReader.ReadToEnd();;
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}
